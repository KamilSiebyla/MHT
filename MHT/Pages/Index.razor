@page "/"

@using Microsoft.Graph;
@using MHT.Infrastructure.Providers;
@using TimeZoneConverter;

@inject Infrastructure.Factories.GraphClientFactory graphClientFactory

<div class="p-5 mb-4 rounded-3">
    <div class="container-fluid py-5">
        <AuthorizeView>
            <Authorized>
                @if (events == null || events.Count == 0)
                {
                    <div class="d-flex justify-content-center">
                        <div class="spinner-border" role="status"></div>
                    </div>
                }
                else
                {
                    <section class="vh-50">
                        <div class="container py-5 h-50">
                            <div class="row">
                                @foreach (var calendarEvent in events)
                                {
                                    <div class="col-md-12 col-xl-4 mb-2">
                                        <div class="card border-5 @ResolveEventsBorder(calendarEvent.Start.DateTime)" style="border-radius: 15px; min-height: 600px;">
                                            <div class="card-body text-center">
                                                <h5 class="mb-2">@calendarEvent.Subject</h5>
                                                <p class="text-muted fs-6 mb-2">Organizer: @calendarEvent.Organizer.EmailAddress.Name</p>
                                                <p class="text-muted fw-bold fs-6 mb-2">Hours: @FormatDate(@calendarEvent.Start.DateTime) - @FormatDate(@calendarEvent.End.DateTime)</p>
                                                <p class="text-muted fs-6 mb-2">Timezone: @calendarEvent.Start.TimeZone</p>
                                                <div class="list-group">
                                                    @if (!calendarEvent.Attendees.Any())
                                                    {
                                                        <div class="card border-info w-auto mt-xl-5">
                                                            <h5 class="card-header">Information</h5>
                                                            <div class="card-body">
                                                                <p class="card-text">
                                                                    There is no participants in this meeting. It seems, that you are alone on this meeting.
                                                                </p>
                                                            </div>
                                                        </div>
                                                    }
                                                    else
                                                    {
                                                        <p class="text-muted fs-6 mb-2">Participants:</p>
                                                        @foreach (var attendee in calendarEvent.Attendees)
                                                        {
                                                            <div class="border-2 list-group-item mb-1 rounded">
                                                                <div class="d-flex align-items-center">
                                                                    <img src="https://mdbcdn.b-cdn.net/img/Photos/new-templates/bootstrap-chat/ava2-bg.webp" class="rounded-circle me-3" style="width: 50px;">
                                                                    <div>
                                                                        <p class="text-muted fs-6 mb-0">Name: @attendee.EmailAddress.Name</p>
                                                                        <p class="text-muted fs-6 mb-0">Type: @attendee.Type.Value.ToString()</p>
                                                                        <p class="text-muted fs-6 mb-0 text-truncate">Response: @attendee.Status.Response.Value.ToString()</p>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        }
                                                    }
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </section>
                }
            </Authorized>
            <NotAuthorized>
                <div class="d-flex justify-content-center">
                    <a class="btn btn-primary btn-large" href="authentication/login">Click here to sign in</a>
                </div>
            </NotAuthorized>
        </AuthorizeView>
    </div>
</div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }
    private GraphServiceClient? graphClient;
    private User currentUser = new User();
    private IList<Event> events = new List<Event>();
    private string? dateTimeFormat;

    protected override async Task OnInitializedAsync()
    {
        if (authenticationStateTask == null)
        {
            throw new AuthenticationException(new Error
                {
                    Message = "Unable to access authentication state"
                });
        }

        graphClient = graphClientFactory.GetAuthenticatedClient();
        var user = (await authenticationStateTask).User;

        var graphTimeZone = user.GetUserGraphTimeZone();
        dateTimeFormat = $"{user.GetUserGraphDateFormat()} {user.GetUserGraphTimeFormat()}";

        var startOfWeek = DateTime.Today;
        var endOfWeek = startOfWeek.AddDays(7);

        var viewOptions = new List<QueryOption>
        {
            new QueryOption("startDateTime", startOfWeek.ToString("o")),
            new QueryOption("endDateTime", endOfWeek.ToString("o"))
        };

        try
        {
            currentUser = await graphClient
                .Me
                .Request()
                .Select(u => new
                {
                    u.DisplayName
                })
                .GetAsync();
        }
        catch (Exception ex)
        {
            throw new Exception($"Error when getting user data: {ex.Message}");
        }

        try
        {
            var eventPage = await graphClient
            .Me
            .CalendarView
            .Request(viewOptions)
            .Header("Prefer", $"outlook.timezone=\"{graphTimeZone}\"")
            .Top(50)
            .Select(e => new
            {
                e.Subject,
                e.Organizer,
                e.Attendees,
                e.Start,
                e.End
            })
            .OrderBy("start/dateTime")
            .GetAsync();

            events = eventPage.CurrentPage;
        }
        catch (Exception ex)
        {
            throw new Exception($"Error when fetching events: {ex.Message}");
        }
    }

    private string FormatDate(string dateAsString)
    {
        DateTime date = DateTime.Parse(dateAsString);
        string formattedDate = date.ToString("dd-MM-yyyy:HH:mm");
        return formattedDate;
    }

    private string ResolveEventsBorder(string startDateAsString)
    {
        double timeDiff = (DateTime.Parse(startDateAsString) - DateTime.Now).TotalDays;

        if (timeDiff < 1)
        {
            return "border-danger";
        }
        else if (timeDiff >= 1 && timeDiff <= 2)
        {
            return "border-warning";
        }
        else
        {
            return "border-success";
        }
    }
}