@page "/"

@using Microsoft.Graph;
@using MHT.Infrastructure.Providers;
@using TimeZoneConverter;

@inject Infrastructure.Factories.GraphClientFactory graphClientFactory

<div class="p-5 mb-4 bg-light rounded-3">
    <div class="container-fluid py-5">
        <h1>MHT START PAGE!</h1>
        <AuthorizeView>
            <Authorized>
                <h4>Welcome from GRAPH by display name: @currentUser.DisplayName</h4>
                <table class="table">
                    <thead>
                        <tr>
                            <th>Subject</th>
                            <th>Start</th>
                            <th>End</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var calendarEvent in events)
                        {
                            <tr>
                                <td>@calendarEvent.Subject</td>
                                <td>@calendarEvent.Start.DateTime</td>
                                <td>@calendarEvent.End.DateTime</td>
                            </tr>
                        }
                    </tbody>
                </table>

            </Authorized>
            <NotAuthorized>
                <a class="btn btn-primary btn-large" href="authentication/login">Click here to sign in</a>
            </NotAuthorized>
        </AuthorizeView>
    </div>
</div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }
    private IList<Event> events = new List<Event>
    {
        new Event
        {
            Subject = "Team meeting",
            Start = new DateTimeTimeZone { DateTime = DateTime.Now.AddHours(1).ToString("s"), TimeZone = "UTC" },
            End = new DateTimeTimeZone { DateTime = DateTime.Now.AddHours(2).ToString("s"), TimeZone = "UTC" },
        },
        new Event
        {
            Subject = "Lunch with John",
            Start = new DateTimeTimeZone { DateTime = DateTime.Now.AddHours(3).ToString("s"), TimeZone = "UTC" },
            End = new DateTimeTimeZone { DateTime = DateTime.Now.AddHours(5).ToString("s"), TimeZone = "UTC" },
        },
        new Event
        {
            Subject = "Architects stand-up",
            Start = new DateTimeTimeZone { DateTime = DateTime.Now.AddHours(5).ToString("s"), TimeZone = "UTC" },
            End = new DateTimeTimeZone { DateTime = DateTime.Now.AddHours(8).ToString("s"), TimeZone = "UTC" },
        }
    };
    private User currentUser = new User();

    protected override async Task OnInitializedAsync()
    {
        if (authenticationStateTask == null)
        {
            throw new AuthenticationException(new Error
                {
                    Message = "Unable to access authentication state"
                });
        }

        var user = (await authenticationStateTask).User;
        var graphClient = graphClientFactory.GetAuthenticatedClient();

        var startOfWeek = DateTime.Today;
        var endOfWeek = startOfWeek.AddDays(7);

        var viewOptions = new List<QueryOption>
        {
            new QueryOption("startDateTime", startOfWeek.ToString("o")),
            new QueryOption("endDateTime", endOfWeek.ToString("o"))
        };

        try
        {
            currentUser = await graphClient
                .Me
                .Request()
                .Select(u => new
                {
                    u.DisplayName
                })
                .GetAsync();
        }
        catch (Exception ex)
        {
            throw new Exception($"Error when fetcing user data: {ex.Message}");
        }

        try
        {
            //var eventPage = await graphClient
            //.Me
            //.CalendarView
            //.Request(viewOptions)
            //.Select(e => new
            //{
            //    e.Subject,
            //    e.Organizer
            //})
            //.OrderBy("start/dateTime")
            //.GetAsync();

            //events = eventPage.CurrentPage;
        }
        catch (Exception ex)
        {
            throw new Exception($"Error when fetching events: {ex.Message}");
        }
    }
}