@page "/"

@using Microsoft.Graph;
@using MHT.Infrastructure.Providers;
@using TimeZoneConverter;

@inject Infrastructure.Factories.GraphClientFactory graphClientFactory

<div class="p-5 mb-4 rounded-3">
    <div class="container-fluid py-5">
        <AuthorizeView>
            <Authorized>
                @if (events == null || events.Count == 0)
                {
                    <div class="d-flex justify-content-center">
                        <div class="spinner-border" role="status"></div>
                    </div>
                }
                else
                {
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th scope="col">Organizer</th>
                                <th scope="col">Subject</th>
                                <th scope="col">Start time</th>
                                <th scope="col">End time</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var calendarEvent in events)
                            {
                                <tr>
                                    <td>@calendarEvent.Organizer.EmailAddress.Name</td>
                                    <td>@calendarEvent.Subject</td>
                                    <td>@calendarEvent.Start.DateTime</td>
                                    <td>@calendarEvent.End.DateTime</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
            </Authorized>
            <NotAuthorized>
                <div class="d-flex justify-content-center">
                    <a class="btn btn-primary btn-large" href="authentication/login">Click here to sign in</a>
                </div>
            </NotAuthorized>
        </AuthorizeView>
    </div>
</div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }
    private GraphServiceClient? graphClient;
    private User currentUser = new User();
    private IList<Event> events = new List<Event>();
    private string? dateTimeFormat;

    protected override async Task OnInitializedAsync()
    {
        if (authenticationStateTask == null)
        {
            throw new AuthenticationException(new Error
                {
                    Message = "Unable to access authentication state"
                });
        }

        graphClient = graphClientFactory.GetAuthenticatedClient();
        var user = (await authenticationStateTask).User;

        var graphTimeZone = user.GetUserGraphTimeZone();
        dateTimeFormat = $"{user.GetUserGraphDateFormat()} {user.GetUserGraphTimeFormat()}";

        var startOfWeek = DateTime.Today;
        var endOfWeek = startOfWeek.AddDays(7);

        var viewOptions = new List<QueryOption>
        {
            new QueryOption("startDateTime", startOfWeek.ToString("o")),
            new QueryOption("endDateTime", endOfWeek.ToString("o"))
        };

        try
        {
            currentUser = await graphClient
                .Me
                .Request()
                .Select(u => new
                {
                    u.DisplayName
                })
                .GetAsync();
        }
        catch (Exception ex)
        {
            throw new Exception($"Error when getting user data: {ex.Message}");
        }

        try
        {
            var eventPage = await graphClient
            .Me
            .CalendarView
            .Request(viewOptions)
            .Header("Prefer", $"outlook.timezone=\"{graphTimeZone}\"")
            .Top(50)
            .Select(e => new
            {
                e.Subject,
                e.Organizer,
                e.Start,
                e.End
            })
            .OrderBy("start/dateTime")
            .GetAsync();

            events = eventPage.CurrentPage;
        }
        catch (Exception ex)
        {
            throw new Exception($"Error when fetching events: {ex.Message}");
        }
    }
}